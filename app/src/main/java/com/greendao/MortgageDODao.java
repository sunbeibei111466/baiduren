package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yl.baiduren.entity.greenentity.MortgageDO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MORTGAGE_DO".
*/
public class MortgageDODao extends AbstractDao<MortgageDO, Long> {

    public static final String TABLENAME = "MORTGAGE_DO";

    /**
     * Properties of entity MortgageDO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property AmountStr = new Property(2, String.class, "amountStr", false, "amountStr");
        public final static Property Num = new Property(3, int.class, "num", false, "num");
        public final static Property Evaluation = new Property(4, String.class, "evaluation", false, "evaluation");
        public final static Property Image = new Property(5, String.class, "image", false, "image");
    }


    public MortgageDODao(DaoConfig config) {
        super(config);
    }
    
    public MortgageDODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MORTGAGE_DO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"name\" TEXT," + // 1: name
                "\"amountStr\" TEXT," + // 2: amountStr
                "\"num\" INTEGER NOT NULL ," + // 3: num
                "\"evaluation\" TEXT," + // 4: evaluation
                "\"image\" TEXT);"); // 5: image
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MORTGAGE_DO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MortgageDO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String amountStr = entity.getAmountStr();
        if (amountStr != null) {
            stmt.bindString(3, amountStr);
        }
        stmt.bindLong(4, entity.getNum());
 
        String evaluation = entity.getEvaluation();
        if (evaluation != null) {
            stmt.bindString(5, evaluation);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MortgageDO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String amountStr = entity.getAmountStr();
        if (amountStr != null) {
            stmt.bindString(3, amountStr);
        }
        stmt.bindLong(4, entity.getNum());
 
        String evaluation = entity.getEvaluation();
        if (evaluation != null) {
            stmt.bindString(5, evaluation);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MortgageDO readEntity(Cursor cursor, int offset) {
        MortgageDO entity = new MortgageDO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // amountStr
            cursor.getInt(offset + 3), // num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // evaluation
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // image
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MortgageDO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAmountStr(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNum(cursor.getInt(offset + 3));
        entity.setEvaluation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MortgageDO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MortgageDO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MortgageDO entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
