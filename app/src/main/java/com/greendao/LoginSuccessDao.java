package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yl.baiduren.entity.greenentity.LoginSuccess;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_SUCCESS".
*/
public class LoginSuccessDao extends AbstractDao<LoginSuccess, Long> {

    public static final String TABLENAME = "LOGIN_SUCCESS";

    /**
     * Properties of entity LoginSuccess.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Login_Id = new Property(0, Long.class, "login_Id", true, "_id");
        public final static Property AccessToken = new Property(1, String.class, "accessToken", false, "accessToken");
        public final static Property Id = new Property(2, int.class, "id", false, "id");
        public final static Property IsVip = new Property(3, boolean.class, "isVip", false, "isVip");
        public final static Property Mobile = new Property(4, String.class, "mobile", false, "mobile");
        public final static Property RoleType = new Property(5, String.class, "roleType", false, "roleType");
        public final static Property UserName = new Property(6, String.class, "userName", false, "userName");
        public final static Property UserType = new Property(7, Integer.class, "userType", false, "userType");
    }


    public LoginSuccessDao(DaoConfig config) {
        super(config);
    }
    
    public LoginSuccessDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_SUCCESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: login_Id
                "\"accessToken\" TEXT," + // 1: accessToken
                "\"id\" INTEGER NOT NULL ," + // 2: id
                "\"isVip\" INTEGER NOT NULL ," + // 3: isVip
                "\"mobile\" TEXT," + // 4: mobile
                "\"roleType\" TEXT," + // 5: roleType
                "\"userName\" TEXT," + // 6: userName
                "\"userType\" INTEGER);"); // 7: userType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_SUCCESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginSuccess entity) {
        stmt.clearBindings();
 
        Long login_Id = entity.getLogin_Id();
        if (login_Id != null) {
            stmt.bindLong(1, login_Id);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(2, accessToken);
        }
        stmt.bindLong(3, entity.getId());
        stmt.bindLong(4, entity.getIsVip() ? 1L: 0L);
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String roleType = entity.getRoleType();
        if (roleType != null) {
            stmt.bindString(6, roleType);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(7, userName);
        }
 
        Integer userType = entity.getUserType();
        if (userType != null) {
            stmt.bindLong(8, userType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginSuccess entity) {
        stmt.clearBindings();
 
        Long login_Id = entity.getLogin_Id();
        if (login_Id != null) {
            stmt.bindLong(1, login_Id);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(2, accessToken);
        }
        stmt.bindLong(3, entity.getId());
        stmt.bindLong(4, entity.getIsVip() ? 1L: 0L);
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String roleType = entity.getRoleType();
        if (roleType != null) {
            stmt.bindString(6, roleType);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(7, userName);
        }
 
        Integer userType = entity.getUserType();
        if (userType != null) {
            stmt.bindLong(8, userType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LoginSuccess readEntity(Cursor cursor, int offset) {
        LoginSuccess entity = new LoginSuccess( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // login_Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accessToken
            cursor.getInt(offset + 2), // id
            cursor.getShort(offset + 3) != 0, // isVip
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // roleType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userName
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // userType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginSuccess entity, int offset) {
        entity.setLogin_Id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccessToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.getInt(offset + 2));
        entity.setIsVip(cursor.getShort(offset + 3) != 0);
        entity.setMobile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRoleType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginSuccess entity, long rowId) {
        entity.setLogin_Id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginSuccess entity) {
        if(entity != null) {
            return entity.getLogin_Id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginSuccess entity) {
        return entity.getLogin_Id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
