package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yl.baiduren.base.BaseRequest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BASE_REQUEST".
*/
public class BaseRequestDao extends AbstractDao<BaseRequest, Long> {

    public static final String TABLENAME = "BASE_REQUEST";

    /**
     * Properties of entity BaseRequest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BId = new Property(0, Long.class, "bId", true, "_id");
        public final static Property DeviceToken = new Property(1, String.class, "deviceToken", false, "DEVICETOKEN");
        public final static Property Platform = new Property(2, Integer.class, "platform", false, "PLATFORM");
        public final static Property Uuid = new Property(3, String.class, "uuid", false, "UUID");
        public final static Property AccessToken = new Property(4, String.class, "accessToken", false, "ACCESSTOKEN");
        public final static Property Timestamp = new Property(5, java.util.Date.class, "timestamp", false, "TIMESTAMP");
        public final static Property Uid = new Property(6, Long.class, "uid", false, "UID");
        public final static Property LoginUsername = new Property(7, String.class, "loginUsername", false, "LOGINUSERNAME");
    }


    public BaseRequestDao(DaoConfig config) {
        super(config);
    }
    
    public BaseRequestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BASE_REQUEST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: bId
                "\"DEVICETOKEN\" TEXT," + // 1: deviceToken
                "\"PLATFORM\" INTEGER," + // 2: platform
                "\"UUID\" TEXT," + // 3: uuid
                "\"ACCESSTOKEN\" TEXT," + // 4: accessToken
                "\"TIMESTAMP\" INTEGER," + // 5: timestamp
                "\"UID\" INTEGER," + // 6: uid
                "\"LOGINUSERNAME\" TEXT);"); // 7: loginUsername
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BASE_REQUEST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BaseRequest entity) {
        stmt.clearBindings();
 
        Long bId = entity.getBId();
        if (bId != null) {
            stmt.bindLong(1, bId);
        }
 
        String deviceToken = entity.getDeviceToken();
        if (deviceToken != null) {
            stmt.bindString(2, deviceToken);
        }
 
        Integer platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindLong(3, platform);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(4, uuid);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(5, accessToken);
        }
 
        java.util.Date timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(6, timestamp.getTime());
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(7, uid);
        }
 
        String loginUsername = entity.getLoginUsername();
        if (loginUsername != null) {
            stmt.bindString(8, loginUsername);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BaseRequest entity) {
        stmt.clearBindings();
 
        Long bId = entity.getBId();
        if (bId != null) {
            stmt.bindLong(1, bId);
        }
 
        String deviceToken = entity.getDeviceToken();
        if (deviceToken != null) {
            stmt.bindString(2, deviceToken);
        }
 
        Integer platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindLong(3, platform);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(4, uuid);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(5, accessToken);
        }
 
        java.util.Date timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(6, timestamp.getTime());
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(7, uid);
        }
 
        String loginUsername = entity.getLoginUsername();
        if (loginUsername != null) {
            stmt.bindString(8, loginUsername);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BaseRequest readEntity(Cursor cursor, int offset) {
        BaseRequest entity = new BaseRequest( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // bId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceToken
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // platform
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uuid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // accessToken
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // timestamp
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // uid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // loginUsername
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BaseRequest entity, int offset) {
        entity.setBId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlatform(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setUuid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAccessToken(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimestamp(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUid(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setLoginUsername(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BaseRequest entity, long rowId) {
        entity.setBId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BaseRequest entity) {
        if(entity != null) {
            return entity.getBId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BaseRequest entity) {
        return entity.getBId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
