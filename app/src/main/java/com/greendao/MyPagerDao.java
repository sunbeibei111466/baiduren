package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yl.baiduren.entity.result.MyPager;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_PAGER".
*/
public class MyPagerDao extends AbstractDao<MyPager, Long> {

    public static final String TABLENAME = "MY_PAGER";

    /**
     * Properties of entity MyPager.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserType = new Property(1, int.class, "userType", false, "userType");
        public final static Property IsVip = new Property(2, boolean.class, "isVip", false, "isVip");
        public final static Property Mobile = new Property(3, String.class, "mobile", false, "mobile");
        public final static Property IdCard = new Property(4, String.class, "idCard", false, "idCard");
        public final static Property RealName = new Property(5, String.class, "realName", false, "realName");
        public final static Property NickName = new Property(6, String.class, "nickName", false, "nickName");
        public final static Property Image = new Property(7, String.class, "image", false, "image");
        public final static Property Burse = new Property(8, String.class, "burse", false, "burse");
        public final static Property RecordNumber = new Property(9, String.class, "recordNumber", false, "recordNumber");
        public final static Property Address = new Property(10, String.class, "address", false, "address");
        public final static Property AreaStr = new Property(11, String.class, "areaStr", false, "areaStr");
        public final static Property StandbyMobile = new Property(12, String.class, "standbyMobile", false, "standbyMobile");
        public final static Property Area = new Property(13, String.class, "area", false, "area");
        public final static Property RoleType = new Property(14, String.class, "roleType", false, "roleType");
        public final static Property UserName = new Property(15, String.class, "userName", false, "userName");
    }


    public MyPagerDao(DaoConfig config) {
        super(config);
    }
    
    public MyPagerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_PAGER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"userType\" INTEGER NOT NULL ," + // 1: userType
                "\"isVip\" INTEGER NOT NULL ," + // 2: isVip
                "\"mobile\" TEXT," + // 3: mobile
                "\"idCard\" TEXT," + // 4: idCard
                "\"realName\" TEXT," + // 5: realName
                "\"nickName\" TEXT," + // 6: nickName
                "\"image\" TEXT," + // 7: image
                "\"burse\" TEXT," + // 8: burse
                "\"recordNumber\" TEXT," + // 9: recordNumber
                "\"address\" TEXT," + // 10: address
                "\"areaStr\" TEXT," + // 11: areaStr
                "\"standbyMobile\" TEXT," + // 12: standbyMobile
                "\"area\" TEXT," + // 13: area
                "\"roleType\" TEXT," + // 14: roleType
                "\"userName\" TEXT);"); // 15: userName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_PAGER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyPager entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserType());
        stmt.bindLong(3, entity.getIsVip() ? 1L: 0L);
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(5, idCard);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(6, realName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(7, nickName);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(8, image);
        }
 
        String burse = entity.getBurse();
        if (burse != null) {
            stmt.bindString(9, burse);
        }
 
        String recordNumber = entity.getRecordNumber();
        if (recordNumber != null) {
            stmt.bindString(10, recordNumber);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(11, address);
        }
 
        String areaStr = entity.getAreaStr();
        if (areaStr != null) {
            stmt.bindString(12, areaStr);
        }
 
        String standbyMobile = entity.getStandbyMobile();
        if (standbyMobile != null) {
            stmt.bindString(13, standbyMobile);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(14, area);
        }
 
        String roleType = entity.getRoleType();
        if (roleType != null) {
            stmt.bindString(15, roleType);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(16, userName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyPager entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserType());
        stmt.bindLong(3, entity.getIsVip() ? 1L: 0L);
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(5, idCard);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(6, realName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(7, nickName);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(8, image);
        }
 
        String burse = entity.getBurse();
        if (burse != null) {
            stmt.bindString(9, burse);
        }
 
        String recordNumber = entity.getRecordNumber();
        if (recordNumber != null) {
            stmt.bindString(10, recordNumber);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(11, address);
        }
 
        String areaStr = entity.getAreaStr();
        if (areaStr != null) {
            stmt.bindString(12, areaStr);
        }
 
        String standbyMobile = entity.getStandbyMobile();
        if (standbyMobile != null) {
            stmt.bindString(13, standbyMobile);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(14, area);
        }
 
        String roleType = entity.getRoleType();
        if (roleType != null) {
            stmt.bindString(15, roleType);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(16, userName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyPager readEntity(Cursor cursor, int offset) {
        MyPager entity = new MyPager( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // userType
            cursor.getShort(offset + 2) != 0, // isVip
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobile
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // idCard
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // realName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nickName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // image
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // burse
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // recordNumber
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // address
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // areaStr
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // standbyMobile
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // area
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // roleType
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // userName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyPager entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserType(cursor.getInt(offset + 1));
        entity.setIsVip(cursor.getShort(offset + 2) != 0);
        entity.setMobile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdCard(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRealName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNickName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBurse(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRecordNumber(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAreaStr(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStandbyMobile(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setArea(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRoleType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUserName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyPager entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyPager entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyPager entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
