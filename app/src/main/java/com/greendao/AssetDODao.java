package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yl.baiduren.entity.greenentity.AssetDO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ASSET_DO".
*/
public class AssetDODao extends AbstractDao<AssetDO, Long> {

    public static final String TABLENAME = "ASSET_DO";

    /**
     * Properties of entity AssetDO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CategoryName = new Property(1, String.class, "categoryName", false, "categoryName");
        public final static Property CategoryId = new Property(2, int.class, "categoryId", false, "categoryId");
        public final static Property Name = new Property(3, String.class, "name", false, "name");
        public final static Property PriceStr = new Property(4, String.class, "priceStr", false, "priceStr");
        public final static Property Num = new Property(5, int.class, "num", false, "num");
        public final static Property TotalStr = new Property(6, String.class, "totalStr", false, "totalStr");
        public final static Property Evaluation = new Property(7, String.class, "evaluation", false, "evaluation");
        public final static Property Area = new Property(8, String.class, "area", false, "area");
        public final static Property Dizhi = new Property(9, String.class, "dizhi", false, "dizhi");
        public final static Property Remark = new Property(10, String.class, "remark", false, "remark");
        public final static Property ImgUrl = new Property(11, String.class, "imgUrl", false, "imgUrl");
    }


    public AssetDODao(DaoConfig config) {
        super(config);
    }
    
    public AssetDODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ASSET_DO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"categoryName\" TEXT," + // 1: categoryName
                "\"categoryId\" INTEGER NOT NULL ," + // 2: categoryId
                "\"name\" TEXT," + // 3: name
                "\"priceStr\" TEXT," + // 4: priceStr
                "\"num\" INTEGER NOT NULL ," + // 5: num
                "\"totalStr\" TEXT," + // 6: totalStr
                "\"evaluation\" TEXT," + // 7: evaluation
                "\"area\" TEXT," + // 8: area
                "\"dizhi\" TEXT," + // 9: dizhi
                "\"remark\" TEXT," + // 10: remark
                "\"imgUrl\" TEXT);"); // 11: imgUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ASSET_DO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AssetDO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(2, categoryName);
        }
        stmt.bindLong(3, entity.getCategoryId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String priceStr = entity.getPriceStr();
        if (priceStr != null) {
            stmt.bindString(5, priceStr);
        }
        stmt.bindLong(6, entity.getNum());
 
        String totalStr = entity.getTotalStr();
        if (totalStr != null) {
            stmt.bindString(7, totalStr);
        }
 
        String evaluation = entity.getEvaluation();
        if (evaluation != null) {
            stmt.bindString(8, evaluation);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(9, area);
        }
 
        String dizhi = entity.getDizhi();
        if (dizhi != null) {
            stmt.bindString(10, dizhi);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(11, remark);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(12, imgUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AssetDO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(2, categoryName);
        }
        stmt.bindLong(3, entity.getCategoryId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String priceStr = entity.getPriceStr();
        if (priceStr != null) {
            stmt.bindString(5, priceStr);
        }
        stmt.bindLong(6, entity.getNum());
 
        String totalStr = entity.getTotalStr();
        if (totalStr != null) {
            stmt.bindString(7, totalStr);
        }
 
        String evaluation = entity.getEvaluation();
        if (evaluation != null) {
            stmt.bindString(8, evaluation);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(9, area);
        }
 
        String dizhi = entity.getDizhi();
        if (dizhi != null) {
            stmt.bindString(10, dizhi);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(11, remark);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(12, imgUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AssetDO readEntity(Cursor cursor, int offset) {
        AssetDO entity = new AssetDO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // categoryName
            cursor.getInt(offset + 2), // categoryId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // priceStr
            cursor.getInt(offset + 5), // num
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // totalStr
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // evaluation
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // area
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // dizhi
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // remark
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // imgUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AssetDO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategoryName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategoryId(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPriceStr(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNum(cursor.getInt(offset + 5));
        entity.setTotalStr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEvaluation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setArea(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDizhi(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRemark(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setImgUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AssetDO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AssetDO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AssetDO entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
