package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yl.baiduren.entity.greenentity.PropertyLoanDO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROPERTY_LOAN_DO".
*/
public class PropertyLoanDODao extends AbstractDao<PropertyLoanDO, Long> {

    public static final String TABLENAME = "PROPERTY_LOAN_DO";

    /**
     * Properties of entity PropertyLoanDO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Unit = new Property(2, String.class, "unit", false, "unit");
        public final static Property Owner = new Property(3, String.class, "owner", false, "owner");
        public final static Property RightYear = new Property(4, int.class, "rightYear", false, "rightYear");
        public final static Property RightValueStr = new Property(5, String.class, "rightValueStr", false, "rightValueStr");
        public final static Property RightEvaluation = new Property(6, String.class, "rightEvaluation", false, "rightEvaluation");
        public final static Property PatentNo = new Property(7, String.class, "patentNo", false, "patentNo");
        public final static Property PatentYear = new Property(8, int.class, "patentYear", false, "patentYear");
        public final static Property PatentValueStr = new Property(9, String.class, "patentValueStr", false, "patentValueStr");
        public final static Property PatentEvaluation = new Property(10, String.class, "patentEvaluation", false, "patentEvaluation");
        public final static Property ReturnMoneyStr = new Property(11, Long.class, "returnMoneyStr", false, "returnMoneyStr");
        public final static Property ReturnMoney = new Property(12, Long.class, "returnMoney", false, "returnMoney");
        public final static Property BalanceStr = new Property(13, String.class, "balanceStr", false, "balanceStr");
        public final static Property Image = new Property(14, String.class, "image", false, "image");
    }


    public PropertyLoanDODao(DaoConfig config) {
        super(config);
    }
    
    public PropertyLoanDODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROPERTY_LOAN_DO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"name\" TEXT," + // 1: name
                "\"unit\" TEXT," + // 2: unit
                "\"owner\" TEXT," + // 3: owner
                "\"rightYear\" INTEGER NOT NULL ," + // 4: rightYear
                "\"rightValueStr\" TEXT," + // 5: rightValueStr
                "\"rightEvaluation\" TEXT," + // 6: rightEvaluation
                "\"patentNo\" TEXT," + // 7: patentNo
                "\"patentYear\" INTEGER NOT NULL ," + // 8: patentYear
                "\"patentValueStr\" TEXT," + // 9: patentValueStr
                "\"patentEvaluation\" TEXT," + // 10: patentEvaluation
                "\"returnMoneyStr\" INTEGER," + // 11: returnMoneyStr
                "\"returnMoney\" INTEGER," + // 12: returnMoney
                "\"balanceStr\" TEXT," + // 13: balanceStr
                "\"image\" TEXT);"); // 14: image
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROPERTY_LOAN_DO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PropertyLoanDO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(3, unit);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(4, owner);
        }
        stmt.bindLong(5, entity.getRightYear());
 
        String rightValueStr = entity.getRightValueStr();
        if (rightValueStr != null) {
            stmt.bindString(6, rightValueStr);
        }
 
        String rightEvaluation = entity.getRightEvaluation();
        if (rightEvaluation != null) {
            stmt.bindString(7, rightEvaluation);
        }
 
        String patentNo = entity.getPatentNo();
        if (patentNo != null) {
            stmt.bindString(8, patentNo);
        }
        stmt.bindLong(9, entity.getPatentYear());
 
        String patentValueStr = entity.getPatentValueStr();
        if (patentValueStr != null) {
            stmt.bindString(10, patentValueStr);
        }
 
        String patentEvaluation = entity.getPatentEvaluation();
        if (patentEvaluation != null) {
            stmt.bindString(11, patentEvaluation);
        }
 
        Long returnMoneyStr = entity.getReturnMoneyStr();
        if (returnMoneyStr != null) {
            stmt.bindLong(12, returnMoneyStr);
        }
 
        Long returnMoney = entity.getReturnMoney();
        if (returnMoney != null) {
            stmt.bindLong(13, returnMoney);
        }
 
        String balanceStr = entity.getBalanceStr();
        if (balanceStr != null) {
            stmt.bindString(14, balanceStr);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(15, image);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PropertyLoanDO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(3, unit);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(4, owner);
        }
        stmt.bindLong(5, entity.getRightYear());
 
        String rightValueStr = entity.getRightValueStr();
        if (rightValueStr != null) {
            stmt.bindString(6, rightValueStr);
        }
 
        String rightEvaluation = entity.getRightEvaluation();
        if (rightEvaluation != null) {
            stmt.bindString(7, rightEvaluation);
        }
 
        String patentNo = entity.getPatentNo();
        if (patentNo != null) {
            stmt.bindString(8, patentNo);
        }
        stmt.bindLong(9, entity.getPatentYear());
 
        String patentValueStr = entity.getPatentValueStr();
        if (patentValueStr != null) {
            stmt.bindString(10, patentValueStr);
        }
 
        String patentEvaluation = entity.getPatentEvaluation();
        if (patentEvaluation != null) {
            stmt.bindString(11, patentEvaluation);
        }
 
        Long returnMoneyStr = entity.getReturnMoneyStr();
        if (returnMoneyStr != null) {
            stmt.bindLong(12, returnMoneyStr);
        }
 
        Long returnMoney = entity.getReturnMoney();
        if (returnMoney != null) {
            stmt.bindLong(13, returnMoney);
        }
 
        String balanceStr = entity.getBalanceStr();
        if (balanceStr != null) {
            stmt.bindString(14, balanceStr);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(15, image);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PropertyLoanDO readEntity(Cursor cursor, int offset) {
        PropertyLoanDO entity = new PropertyLoanDO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // unit
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // owner
            cursor.getInt(offset + 4), // rightYear
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // rightValueStr
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // rightEvaluation
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // patentNo
            cursor.getInt(offset + 8), // patentYear
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // patentValueStr
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // patentEvaluation
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // returnMoneyStr
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // returnMoney
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // balanceStr
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // image
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PropertyLoanDO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUnit(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOwner(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRightYear(cursor.getInt(offset + 4));
        entity.setRightValueStr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRightEvaluation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPatentNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPatentYear(cursor.getInt(offset + 8));
        entity.setPatentValueStr(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPatentEvaluation(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setReturnMoneyStr(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setReturnMoney(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setBalanceStr(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setImage(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PropertyLoanDO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PropertyLoanDO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PropertyLoanDO entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
