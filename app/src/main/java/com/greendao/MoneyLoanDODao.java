package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yl.baiduren.entity.greenentity.MoneyLoanDO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MONEY_LOAN_DO".
*/
public class MoneyLoanDODao extends AbstractDao<MoneyLoanDO, Long> {

    public static final String TABLENAME = "MONEY_LOAN_DO";

    /**
     * Properties of entity MoneyLoanDO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "type");
        public final static Property PrincipalStr = new Property(2, String.class, "principalStr", false, "principalStr");
        public final static Property Interest = new Property(3, double.class, "interest", false, "interest");
        public final static Property LoanTime = new Property(4, Long.class, "loanTime", false, "loanTime");
        public final static Property EndTime = new Property(5, Long.class, "endTime", false, "endTime");
        public final static Property PayMoneyStr = new Property(6, String.class, "payMoneyStr", false, "payMoneyStr");
        public final static Property BalanceStr = new Property(7, String.class, "balanceStr", false, "balanceStr");
        public final static Property Image = new Property(8, String.class, "image", false, "image");
    }

    private DaoSession daoSession;


    public MoneyLoanDODao(DaoConfig config) {
        super(config);
    }
    
    public MoneyLoanDODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MONEY_LOAN_DO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"type\" TEXT," + // 1: type
                "\"principalStr\" TEXT," + // 2: principalStr
                "\"interest\" REAL NOT NULL ," + // 3: interest
                "\"loanTime\" INTEGER," + // 4: loanTime
                "\"endTime\" INTEGER," + // 5: endTime
                "\"payMoneyStr\" TEXT," + // 6: payMoneyStr
                "\"balanceStr\" TEXT," + // 7: balanceStr
                "\"image\" TEXT);"); // 8: image
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MONEY_LOAN_DO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MoneyLoanDO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String principalStr = entity.getPrincipalStr();
        if (principalStr != null) {
            stmt.bindString(3, principalStr);
        }
        stmt.bindDouble(4, entity.getInterest());
 
        Long loanTime = entity.getLoanTime();
        if (loanTime != null) {
            stmt.bindLong(5, loanTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(6, endTime);
        }
 
        String payMoneyStr = entity.getPayMoneyStr();
        if (payMoneyStr != null) {
            stmt.bindString(7, payMoneyStr);
        }
 
        String balanceStr = entity.getBalanceStr();
        if (balanceStr != null) {
            stmt.bindString(8, balanceStr);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(9, image);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MoneyLoanDO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String principalStr = entity.getPrincipalStr();
        if (principalStr != null) {
            stmt.bindString(3, principalStr);
        }
        stmt.bindDouble(4, entity.getInterest());
 
        Long loanTime = entity.getLoanTime();
        if (loanTime != null) {
            stmt.bindLong(5, loanTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(6, endTime);
        }
 
        String payMoneyStr = entity.getPayMoneyStr();
        if (payMoneyStr != null) {
            stmt.bindString(7, payMoneyStr);
        }
 
        String balanceStr = entity.getBalanceStr();
        if (balanceStr != null) {
            stmt.bindString(8, balanceStr);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(9, image);
        }
    }

    @Override
    protected final void attachEntity(MoneyLoanDO entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MoneyLoanDO readEntity(Cursor cursor, int offset) {
        MoneyLoanDO entity = new MoneyLoanDO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // principalStr
            cursor.getDouble(offset + 3), // interest
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // loanTime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // endTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // payMoneyStr
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // balanceStr
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // image
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MoneyLoanDO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrincipalStr(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInterest(cursor.getDouble(offset + 3));
        entity.setLoanTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setEndTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setPayMoneyStr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBalanceStr(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MoneyLoanDO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MoneyLoanDO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MoneyLoanDO entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
