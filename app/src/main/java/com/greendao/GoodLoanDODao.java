package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yl.baiduren.entity.greenentity.GoodLoanDO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOOD_LOAN_DO".
*/
public class GoodLoanDODao extends AbstractDao<GoodLoanDO, Long> {

    public static final String TABLENAME = "GOOD_LOAN_DO";

    /**
     * Properties of entity GoodLoanDO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Unit = new Property(2, String.class, "unit", false, "unit");
        public final static Property Num = new Property(3, int.class, "num", false, "num");
        public final static Property ValueStr = new Property(4, String.class, "valueStr", false, "valueStr");
        public final static Property Evaluation = new Property(5, String.class, "evaluation", false, "evaluation");
        public final static Property Depreciation = new Property(6, double.class, "depreciation", false, "depreciation");
        public final static Property BorrowTime = new Property(7, Long.class, "borrowTime", false, "borrowTime");
        public final static Property UseLife = new Property(8, int.class, "useLife", false, "useLife");
        public final static Property ReturnNum = new Property(9, Long.class, "returnNum", false, "returnNum");
        public final static Property BalanceStr = new Property(10, Long.class, "balanceStr", false, "balanceStr");
        public final static Property Image = new Property(11, String.class, "image", false, "image");
    }


    public GoodLoanDODao(DaoConfig config) {
        super(config);
    }
    
    public GoodLoanDODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOOD_LOAN_DO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"name\" TEXT," + // 1: name
                "\"unit\" TEXT," + // 2: unit
                "\"num\" INTEGER NOT NULL ," + // 3: num
                "\"valueStr\" TEXT," + // 4: valueStr
                "\"evaluation\" TEXT," + // 5: evaluation
                "\"depreciation\" REAL NOT NULL ," + // 6: depreciation
                "\"borrowTime\" INTEGER," + // 7: borrowTime
                "\"useLife\" INTEGER NOT NULL ," + // 8: useLife
                "\"returnNum\" INTEGER," + // 9: returnNum
                "\"balanceStr\" INTEGER," + // 10: balanceStr
                "\"image\" TEXT);"); // 11: image
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOOD_LOAN_DO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodLoanDO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(3, unit);
        }
        stmt.bindLong(4, entity.getNum());
 
        String valueStr = entity.getValueStr();
        if (valueStr != null) {
            stmt.bindString(5, valueStr);
        }
 
        String evaluation = entity.getEvaluation();
        if (evaluation != null) {
            stmt.bindString(6, evaluation);
        }
        stmt.bindDouble(7, entity.getDepreciation());
 
        Long borrowTime = entity.getBorrowTime();
        if (borrowTime != null) {
            stmt.bindLong(8, borrowTime);
        }
        stmt.bindLong(9, entity.getUseLife());
 
        Long returnNum = entity.getReturnNum();
        if (returnNum != null) {
            stmt.bindLong(10, returnNum);
        }
 
        Long balanceStr = entity.getBalanceStr();
        if (balanceStr != null) {
            stmt.bindLong(11, balanceStr);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(12, image);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodLoanDO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(3, unit);
        }
        stmt.bindLong(4, entity.getNum());
 
        String valueStr = entity.getValueStr();
        if (valueStr != null) {
            stmt.bindString(5, valueStr);
        }
 
        String evaluation = entity.getEvaluation();
        if (evaluation != null) {
            stmt.bindString(6, evaluation);
        }
        stmt.bindDouble(7, entity.getDepreciation());
 
        Long borrowTime = entity.getBorrowTime();
        if (borrowTime != null) {
            stmt.bindLong(8, borrowTime);
        }
        stmt.bindLong(9, entity.getUseLife());
 
        Long returnNum = entity.getReturnNum();
        if (returnNum != null) {
            stmt.bindLong(10, returnNum);
        }
 
        Long balanceStr = entity.getBalanceStr();
        if (balanceStr != null) {
            stmt.bindLong(11, balanceStr);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(12, image);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoodLoanDO readEntity(Cursor cursor, int offset) {
        GoodLoanDO entity = new GoodLoanDO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // unit
            cursor.getInt(offset + 3), // num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // valueStr
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // evaluation
            cursor.getDouble(offset + 6), // depreciation
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // borrowTime
            cursor.getInt(offset + 8), // useLife
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // returnNum
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // balanceStr
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // image
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodLoanDO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUnit(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNum(cursor.getInt(offset + 3));
        entity.setValueStr(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEvaluation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDepreciation(cursor.getDouble(offset + 6));
        entity.setBorrowTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setUseLife(cursor.getInt(offset + 8));
        entity.setReturnNum(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setBalanceStr(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setImage(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodLoanDO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodLoanDO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodLoanDO entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
